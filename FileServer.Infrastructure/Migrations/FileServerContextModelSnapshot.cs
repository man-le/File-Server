// <auto-generated />
using System;
using FileServer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FileServer.Infrastructure.Migrations
{
    [DbContext(typeof(FileServerContext))]
    partial class FileServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FileServer.Domain.FileAggregate.FileInfo", b =>
                {
                    b.Property<string>("TenantID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FileID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RootFolderTenantID")
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("TenantID");

                    b.HasIndex("RootFolderTenantID");

                    b.ToTable("FileInfo", "dbo");
                });

            modelBuilder.Entity("FileServer.Domain.FileAggregate.FileInfo", b =>
                {
                    b.HasOne("FileServer.Domain.FileAggregate.FileInfo", "RootFolder")
                        .WithMany("ChildContents")
                        .HasForeignKey("RootFolderTenantID");

                    b.OwnsOne("FileServer.Domain.FileAggregate.FileInfoValue", "FileInformation", b1 =>
                        {
                            b1.Property<string>("FileInfoTenantID")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("CreatedBy")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("FileLocation")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("ModifiedBy")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTime>("ModifiedDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("FileInfoTenantID");

                            b1.ToTable("FileInfo");

                            b1.WithOwner()
                                .HasForeignKey("FileInfoTenantID");
                        });

                    b.Navigation("FileInformation");

                    b.Navigation("RootFolder");
                });

            modelBuilder.Entity("FileServer.Domain.FileAggregate.FileInfo", b =>
                {
                    b.Navigation("ChildContents");
                });
#pragma warning restore 612, 618
        }
    }
}
